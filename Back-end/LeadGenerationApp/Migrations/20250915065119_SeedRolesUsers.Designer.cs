// <auto-generated />
using System;
using LeadGenerationApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LeadGenerationApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250915065119_SeedRolesUsers")]
    partial class SeedRolesUsers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LeadGenerationApp.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Area")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double?>("Budget")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Location")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Priority")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClientId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Dashboard", b =>
                {
                    b.Property<int>("DashboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DashboardId"));

                    b.Property<int>("PendingLeft")
                        .HasColumnType("int");

                    b.Property<int>("TodaysAppointment")
                        .HasColumnType("int");

                    b.Property<int>("TotalCompleted")
                        .HasColumnType("int");

                    b.Property<int>("TotalLeads")
                        .HasColumnType("int");

                    b.HasKey("DashboardId");

                    b.ToTable("Dashboard");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Lead", b =>
                {
                    b.Property<int>("LeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeadId"));

                    b.Property<DateTime>("CreatedBy")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LeadId");

                    b.HasIndex("UserId");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.LeadAssign", b =>
                {
                    b.Property<int>("LeadAssignId")
                        .HasColumnType("int");

                    b.Property<int?>("LeadAssignId1")
                        .HasColumnType("int");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Permition");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserId")
                        .HasColumnOrder(1);

                    b.HasKey("LeadAssignId");

                    b.HasIndex("LeadAssignId1");

                    b.HasIndex("UserId");

                    b.ToTable("LeadAssign");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<string>("ManagerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ManagerId");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionID"));

                    b.Property<bool>("Insert")
                        .HasColumnType("bit");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<bool>("Update")
                        .HasColumnType("bit");

                    b.Property<bool>("Write")
                        .HasColumnType("bit");

                    b.HasKey("PermissionID");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Roles", b =>
                {
                    b.Property<int>("RollID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RollID"));

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.Property<string>("RollName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RollID");

                    b.HasIndex("PermissionID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RollID = 1,
                            PermissionID = 1,
                            RollName = "Admin"
                        },
                        new
                        {
                            RollID = 2,
                            PermissionID = 2,
                            RollName = "Manager"
                        },
                        new
                        {
                            RollID = 3,
                            PermissionID = 3,
                            RollName = "User"
                        });
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UserId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("RollID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RollID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RollID = 1,
                            UserName = "AliceAdmin",
                            UserPassword = "admin123"
                        },
                        new
                        {
                            UserId = 2,
                            RollID = 2,
                            UserName = "BobManager",
                            UserPassword = "manager123"
                        },
                        new
                        {
                            UserId = 3,
                            RollID = 3,
                            UserName = "CharlieTeam",
                            UserPassword = "user123"
                        },
                        new
                        {
                            UserId = 4,
                            RollID = 3,
                            UserName = "DianaTeam",
                            UserPassword = "user123"
                        });
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Lead", b =>
                {
                    b.HasOne("LeadGenerationApp.Models.Users", "User")
                        .WithMany("Leads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.LeadAssign", b =>
                {
                    b.HasOne("LeadGenerationApp.Models.Lead", "Lead")
                        .WithMany("Assignments")
                        .HasForeignKey("LeadAssignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeadGenerationApp.Models.LeadAssign", null)
                        .WithMany("LeadAssigns")
                        .HasForeignKey("LeadAssignId1");

                    b.HasOne("LeadGenerationApp.Models.Users", "User")
                        .WithMany("LeadAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Roles", b =>
                {
                    b.HasOne("LeadGenerationApp.Models.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Team", b =>
                {
                    b.HasOne("LeadGenerationApp.Models.Manager", "Manager")
                        .WithMany("Teams")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LeadGenerationApp.Models.Users", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Users", b =>
                {
                    b.HasOne("LeadGenerationApp.Models.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RollID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Lead", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.LeadAssign", b =>
                {
                    b.Navigation("LeadAssigns");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Manager", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LeadGenerationApp.Models.Users", b =>
                {
                    b.Navigation("LeadAssignments");

                    b.Navigation("Leads");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
